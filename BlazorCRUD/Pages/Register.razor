@layout EmptyLayout
@page "/register"
@using BlazorCRUD.Services;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Register</h5>
            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="@registerModel.Email" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" class="form-control" @bind-Value="@registerModel.Password" type="password" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" class="form-control" @bind-Value="@registerModel.ConfirmPassword" type="password" />
                </div>

                <button type="submit" class="btn btn-primary">Register</button>
            </EditForm>
            <div class="mt-3">
                <a href="login">Already have an account? Login</a>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var result = await UserService.RegisterUser(registerModel); 
        if (result.Success)
        {
           NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}