@layout EmptyLayout
@page "/login"
@using BlazorCRUD.Services
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject UserService UserService
@inject AuthService AuthService

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Login</h5>
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="@loginModel.Email" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" class="form-control" @bind-Value="@loginModel.Password" type="password" />
                </div>

                <button type="submit" class="btn btn-primary">Login</button>
            </EditForm>
            <div class="mt-3">
                <a href="register">Don't have an account? Register</a>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var result = await UserService.AuthenticateUser(loginModel.Email, loginModel.Password);
        if (result.Success)
        {
            UserStateService.SetCurrentUser(result.User);
            var jwtToken = UserService.GenerateJwtToken(result.User);

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", jwtToken);

            await AuthService.SetAuthorizationHeaderAsync();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }


    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
    @inject IJSRuntime JSRuntime

    private async Task StoreToken(string token)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
    }

}
